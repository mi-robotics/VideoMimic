#usda 1.0
(
    defaultPrim = "smplx_humanoid"
    upAxis = "Z"
)

def Xform "smplx_humanoid" (
    delete apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
)
{

    def Xform "bodies"
    {
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Xform "Pelvis" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI", "PhysicsArticulationRootAPI", "PhysxArticulationAPI", "AnimationDataAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.003100000089034438, -0.3513999879360199, 0.012000000104308128, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Cube "Pelvis" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.1079, -0.0846, -0.084), (0.1079, 0.0846, 0.084)]
                    uniform token physics:approximation = "boundingCube"
                    uniform token purpose = "guide"
                    matrix4d xformOp:transform = ( (0.10790000110864639, 0, 0, 0), (0, 0.08460000157356262, 0, 0), (0, 0, 0.08399999886751175, 0), (-0.003100000089034438, -0.0215000007301569, -0.01679999940097332, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Cube "Pelvis" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3[] extent = [(-0.1079, -0.0846, -0.084), (0.1079, 0.0846, 0.084)]
                    rel material:binding = </smplx_humanoid/bodies/Pelvis/visuals/Looks/material_rgba>
                    matrix4d xformOp:transform = ( (0.10790000110864639, 0, 0, 0), (0, 0.08460000157356262, 0, 0), (0, 0, 0.08399999886751175, 0), (-0.003100000089034438, -0.0215000007301569, -0.01679999940097332, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/Pelvis/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/Pelvis/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "L_Hip" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.06130000203847885, -0.44419997930526733, -0.014000000432133675, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "L_Hip" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.175319, -0.0605, -0.0605), (0.175319, 0.0605, 0.0605)]
                    double height = 0.2296379953622818
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.060499999672174454
                    matrix4d xformOp:transform = ( (0.14326869494199934, -0.9893834559666459, -0.024386208650239105, 0), (0.9893834559666459, 0.1437888587809013, -0.021103792884861194, 0), (0.024386208650239105, -0.021103792884861194, 0.999479836161098, 0), (0.02735000103712082, -0.18940000236034393, -0.004699999932199717, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "L_Hip" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.175319, -0.0605, -0.0605), (0.175319, 0.0605, 0.0605)]
                    double height = 0.2296379953622818
                    rel material:binding = </smplx_humanoid/bodies/L_Hip/visuals/Looks/material_rgba>
                    double radius = 0.060499999672174454
                    matrix4d xformOp:transform = ( (0.14326869494199934, -0.9893834559666459, -0.024386208650239105, 0), (0.9893834559666459, 0.1437888587809013, -0.021103792884861194, 0), (0.024386208650239105, -0.021103792884861194, 0.999479836161098, 0), (0.02735000103712082, -0.18940000236034393, -0.004699999932199717, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/L_Hip/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/L_Hip/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/L_Hip/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "L_Knee" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            prepend rel physics:filteredPairs = [
                </smplx_humanoid/bodies/L_Toe>,
                </smplx_humanoid/bodies/R_Ankle>,
                </smplx_humanoid/bodies/R_Toe>,
            ]
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.11599999666213989, -0.8229999542236328, -0.023400001227855682, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "L_Knee" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.1752767, -0.0533, -0.0533), (0.1752767, 0.0533, 0.0533)]
                    double height = 0.2439534068107605
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.053300000727176666
                    matrix4d xformOp:transform = ( (-0.1069878158655524, -0.9911729708978001, -0.07829363379019894, 0), (0.9911729708978001, -0.100123528560637, -0.08689973516034177, 0), (0.07829363379019894, -0.08689973516034177, 0.9931357126950846, 0), (-0.02174999937415123, -0.20149999856948853, -0.015949999913573265, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "L_Knee" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.1752767, -0.0533, -0.0533), (0.1752767, 0.0533, 0.0533)]
                    double height = 0.2439534068107605
                    rel material:binding = </smplx_humanoid/bodies/L_Knee/visuals/Looks/material_rgba>
                    double radius = 0.053300000727176666
                    matrix4d xformOp:transform = ( (-0.1069878158655524, -0.9911729708978001, -0.07829363379019894, 0), (0.9911729708978001, -0.100123528560637, -0.08689973516034177, 0), (0.07829363379019894, -0.08689973516034177, 0.9931357126950846, 0), (-0.02174999937415123, -0.20149999856948853, -0.015949999913573265, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/L_Knee/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/L_Knee/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/L_Knee/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "L_Ankle" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            prepend rel physics:filteredPairs = </smplx_humanoid/bodies/R_Knee>
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.07249999791383743, -1.226099967956543, -0.05530000105500221, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Cube "L_Ankle" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.0498, -0.0464, -0.0857), (0.0498, 0.0464, 0.0857)]
                    uniform token physics:approximation = "boundingCube"
                    uniform token purpose = "guide"
                    matrix4d xformOp:transform = ( (0.049800001084804535, 0, 0, 0), (0, 0.04639999940991402, 0, 0), (0, 0, 0.08569999784231186, 0), (0.040699999779462814, -0.028699999675154686, 0.02319999970495701, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Cube "L_Ankle" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3[] extent = [(-0.0498, -0.0464, -0.0857), (0.0498, 0.0464, 0.0857)]
                    rel material:binding = </smplx_humanoid/bodies/L_Ankle/visuals/Looks/material_rgba>
                    matrix4d xformOp:transform = ( (0.049800001084804535, 0, 0, 0), (0, 0.04639999940991402, 0, 0), (0, 0, 0.08569999784231186, 0), (0.040699999779462814, -0.028699999675154686, 0.02319999970495701, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/L_Ankle/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/L_Ankle/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/L_Ankle/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "L_Toe" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            prepend rel physics:filteredPairs = [
                </smplx_humanoid/bodies/L_Knee>,
                </smplx_humanoid/bodies/R_Knee>,
            ]
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.11980000138282776, -1.2840999364852905, 0.06289999186992645, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Cube "L_Toe" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.0478, -0.0205, -0.0495), (0.0478, 0.0205, 0.0495)]
                    uniform token physics:approximation = "boundingCube"
                    uniform token purpose = "guide"
                    matrix4d xformOp:transform = ( (0.04780000075697899, 0, 0, 0), (0, 0.020500000566244125, 0, 0), (0, 0, 0.0494999997317791, 0), (-0.006500000134110451, 0.0034000000450760126, 0.025599999353289604, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Cube "L_Toe" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3[] extent = [(-0.0478, -0.0205, -0.0495), (0.0478, 0.0205, 0.0495)]
                    rel material:binding = </smplx_humanoid/bodies/L_Toe/visuals/Looks/material_rgba>
                    matrix4d xformOp:transform = ( (0.04780000075697899, 0, 0, 0), (0, 0.020500000566244125, 0, 0), (0, 0, 0.0494999997317791, 0), (-0.006500000134110451, 0.0034000000450760126, 0.025599999353289604, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/L_Toe/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/L_Toe/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/L_Toe/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "R_Hip" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.06019999831914902, -0.455299973487854, -0.009299999102950096, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "R_Hip" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.16942702, -0.0598, -0.0598), (0.16942702, 0.0598, 0.0598)]
                    double height = 0.2192540466785431
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.05979999899864197
                    matrix4d xformOp:transform = ( (-0.12132053519705899, -0.9915439039198688, -0.04606528610152427, 0), (0.9915439039198688, -0.11890553555645766, -0.051982270691417476, 0), (0.04606528610152427, -0.051982270691417476, 0.9975850003593986, 0), (-0.022099999710917473, -0.18119999766349792, -0.008450000546872616, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "R_Hip" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.16942702, -0.0598, -0.0598), (0.16942702, 0.0598, 0.0598)]
                    double height = 0.2192540466785431
                    rel material:binding = </smplx_humanoid/bodies/R_Hip/visuals/Looks/material_rgba>
                    double radius = 0.05979999899864197
                    matrix4d xformOp:transform = ( (-0.12132053519705899, -0.9915439039198688, -0.04606528610152427, 0), (0.9915439039198688, -0.11890553555645766, -0.051982270691417476, 0), (0.04606528610152427, -0.051982270691417476, 0.9975850003593986, 0), (-0.022099999710917473, -0.18119999766349792, -0.008450000546872616, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/R_Hip/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/R_Hip/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/R_Hip/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "R_Knee" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            prepend rel physics:filteredPairs = [
                </smplx_humanoid/bodies/L_Ankle>,
                </smplx_humanoid/bodies/L_Toe>,
                </smplx_humanoid/bodies/R_Toe>,
            ]
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.10439999401569366, -0.8176999688148499, -0.026099998503923416, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "R_Knee" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.17858656, -0.0551, -0.0551), (0.17858656, 0.0551, 0.0551)]
                    double height = 0.24697311222553253
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.05510000139474869
                    matrix4d xformOp:transform = ( (0.037251187481394776, -0.9980842050572747, -0.0493980853636895, 0), (0.9980842050572747, 0.039603723787017486, -0.04753280033383156, 0), (0.0493980853636895, -0.04753280033383156, 0.9976474636943773, 0), (0.007699999958276749, -0.20534999668598175, -0.010100000537931919, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "R_Knee" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.17858656, -0.0551, -0.0551), (0.17858656, 0.0551, 0.0551)]
                    double height = 0.24697311222553253
                    rel material:binding = </smplx_humanoid/bodies/R_Knee/visuals/Looks/material_rgba>
                    double radius = 0.05510000139474869
                    matrix4d xformOp:transform = ( (0.037251187481394776, -0.9980842050572747, -0.0493980853636895, 0), (0.9980842050572747, 0.039603723787017486, -0.04753280033383156, 0), (0.0493980853636895, -0.04753280033383156, 0.9976474636943773, 0), (0.007699999958276749, -0.20534999668598175, -0.010100000537931919, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/R_Knee/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/R_Knee/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/R_Knee/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "R_Ankle" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            prepend rel physics:filteredPairs = </smplx_humanoid/bodies/L_Knee>
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.08899999409914017, -1.2283999919891357, -0.046299997717142105, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Cube "R_Ankle" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.0498, -0.0464, -0.0857), (0.0498, 0.0464, 0.0857)]
                    uniform token physics:approximation = "boundingCube"
                    uniform token purpose = "guide"
                    matrix4d xformOp:transform = ( (0.049800001084804535, 0, 0, 0), (0, 0.04639999940991402, 0, 0), (0, 0, 0.08569999784231186, 0), (-0.024299999698996544, -0.02630000002682209, 0.0142000000923872, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Cube "R_Ankle" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3[] extent = [(-0.0498, -0.0464, -0.0857), (0.0498, 0.0464, 0.0857)]
                    rel material:binding = </smplx_humanoid/bodies/R_Ankle/visuals/Looks/material_rgba>
                    matrix4d xformOp:transform = ( (0.049800001084804535, 0, 0, 0), (0, 0.04639999940991402, 0, 0), (0, 0, 0.08569999784231186, 0), (-0.024299999698996544, -0.02630000002682209, 0.0142000000923872, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/R_Ankle/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/R_Ankle/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/R_Ankle/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "R_Toe" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            prepend rel physics:filteredPairs = [
                </smplx_humanoid/bodies/L_Knee>,
                </smplx_humanoid/bodies/R_Knee>,
            ]
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.12779998779296875, -1.2867000102996826, 0.07270000874996185, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Cube "R_Toe" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.0478, -0.0205, -0.0495), (0.0478, 0.0205, 0.0495)]
                    uniform token physics:approximation = "boundingCube"
                    uniform token purpose = "guide"
                    matrix4d xformOp:transform = ( (0.04780000075697899, 0, 0, 0), (0, 0.020500000566244125, 0, 0), (0, 0, 0.0494999997317791, 0), (0.014499999582767487, 0.006200000178068876, 0.015799999237060547, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Cube "R_Toe" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3[] extent = [(-0.0478, -0.0205, -0.0495), (0.0478, 0.0205, 0.0495)]
                    rel material:binding = </smplx_humanoid/bodies/R_Toe/visuals/Looks/material_rgba>
                    matrix4d xformOp:transform = ( (0.04780000075697899, 0, 0, 0), (0, 0.020500000566244125, 0, 0), (0, 0, 0.0494999997317791, 0), (0.014499999582767487, 0.006200000178068876, 0.015799999237060547, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/R_Toe/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/R_Toe/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/R_Toe/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "Torso" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            prepend rel physics:filteredPairs = </smplx_humanoid/bodies/Chest>
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.00030000018887221813, -0.24149999022483826, -0.015599999576807022, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "Torso" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.07852212, -0.0719, -0.0719), (0.07852212, 0.0719, 0.0719)]
                    double height = 0.013244240544736385
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.07190000265836716
                    matrix4d xformOp:transform = ( (0.06795404160675766, 0.9966593977097205, -0.04530270558778726, 0), (-0.9966593977097205, 0.0698757863327728, 0.042278378660420834, 0), (0.04530270558778726, 0.042278378660420834, 0.9980782552739849, 0), (0.004750000312924385, 0.06589999794960022, -0.003000000026077032, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "Torso" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.07852212, -0.0719, -0.0719), (0.07852212, 0.0719, 0.0719)]
                    double height = 0.013244240544736385
                    rel material:binding = </smplx_humanoid/bodies/Torso/visuals/Looks/material_rgba>
                    double radius = 0.07190000265836716
                    matrix4d xformOp:transform = ( (0.06795404160675766, 0.9966593977097205, -0.04530270558778726, 0), (-0.9966593977097205, 0.0698757863327728, 0.042278378660420834, 0), (0.04530270558778726, 0.042278378660420834, 0.9980782552739849, 0), (0.004750000312924385, 0.06589999794960022, -0.003000000026077032, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/Torso/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/Torso/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/Torso/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "Spine" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.009700000286102295, -0.1095999926328659, -0.02149999886751175, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "Spine" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.079003744, -0.076, -0.076), (0.079003744, 0.076, 0.076)]
                    double height = 0.006007495801895857
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.07599999755620956
                    matrix4d xformOp:transform = ( (-0.18310454126936548, 0.8655854413381192, 0.466084380505265, 0), (-0.8655854413381192, 0.08282254849859072, -0.4938646884305058, 0), (-0.466084380505265, -0.4938646884305058, 0.7340729102320438, 0), (-0.0056500001810491085, 0.026099998503923416, 0.0142000000923872, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "Spine" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.079003744, -0.076, -0.076), (0.079003744, 0.076, 0.076)]
                    double height = 0.006007495801895857
                    rel material:binding = </smplx_humanoid/bodies/Spine/visuals/Looks/material_rgba>
                    double radius = 0.07599999755620956
                    matrix4d xformOp:transform = ( (-0.18310454126936548, 0.8655854413381192, 0.466084380505265, 0), (-0.8655854413381192, 0.08282254849859072, -0.4938646884305058, 0), (-0.466084380505265, -0.4938646884305058, 0.7340729102320438, 0), (-0.0056500001810491085, 0.026099998503923416, 0.0142000000923872, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/Spine/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/Spine/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/Spine/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "Chest" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            prepend rel physics:filteredPairs = [
                </smplx_humanoid/bodies/Torso>,
                </smplx_humanoid/bodies/Head>,
                </smplx_humanoid/bodies/L_Shoulder>,
                </smplx_humanoid/bodies/R_Shoulder>,
            ]
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.001600000075995922, -0.057399991899728775, 0.0069000013172626495, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "Chest" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.10842805, -0.1028, -0.1028), (0.10842805, 0.1028, 0.1028)]
                    double height = 0.011256108060479164
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.10279999673366547
                    matrix4d xformOp:transform = ( (-0.04442037087921147, 0.9861311554080743, -0.15991323856101136, 0), (-0.9861311554080743, -0.017659396364052782, 0.165025928784571, 0), (0.15991323856101136, 0.165025928784571, 0.9732390254848412, 0), (-0.0022499999031424522, 0.05574999749660492, -0.008700000122189522, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "Chest" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.10842805, -0.1028, -0.1028), (0.10842805, 0.1028, 0.1028)]
                    double height = 0.011256108060479164
                    rel material:binding = </smplx_humanoid/bodies/Chest/visuals/Looks/material_rgba>
                    double radius = 0.10279999673366547
                    matrix4d xformOp:transform = ( (-0.04442037087921147, 0.9861311554080743, -0.15991323856101136, 0), (-0.9861311554080743, -0.017659396364052782, 0.165025928784571, 0), (0.15991323856101136, 0.165025928784571, 0.9732390254848412, 0), (-0.0022499999031424522, 0.05574999749660492, -0.008700000122189522, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/Chest/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/Chest/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/Chest/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "Neck" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.013799999840557575, 0.10780000686645508, -0.024699997156858444, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "Neck" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.09101461, -0.0419, -0.0419), (0.09101461, 0.0419, 0.0419)]
                    double height = 0.09822921454906464
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.04190000146627426
                    matrix4d xformOp:transform = ( (0.15066804881475626, 0.9803600280449061, 0.1272533809987273, 0), (-0.9803600280449061, 0.1647411099876237, -0.10841886115582255, 0), (-0.1272533809987273, -0.10841886115582255, 0.9859269388271326, 0), (0.012399999424815178, 0.08024999499320984, 0.010350000113248825, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "Neck" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.09101461, -0.0419, -0.0419), (0.09101461, 0.0419, 0.0419)]
                    double height = 0.09822921454906464
                    rel material:binding = </smplx_humanoid/bodies/Neck/visuals/Looks/material_rgba>
                    double radius = 0.04190000146627426
                    matrix4d xformOp:transform = ( (0.15066804881475626, 0.9803600280449061, 0.1272533809987273, 0), (-0.9803600280449061, 0.1647411099876237, -0.10841886115582255, 0), (-0.1272533809987273, -0.10841886115582255, 0.9859269388271326, 0), (0.012399999424815178, 0.08024999499320984, 0.010350000113248825, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/Neck/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/Neck/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/Neck/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "Head" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            prepend rel physics:filteredPairs = </smplx_humanoid/bodies/Chest>
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.01100000087171793, 0.26829999685287476, -0.003999996930360794, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Cube "Head" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.0609, -0.1096, -0.0797), (0.0609, 0.1096, 0.0797)]
                    uniform token physics:approximation = "boundingCube"
                    uniform token purpose = "guide"
                    matrix4d xformOp:transform = ( (0.0608999989926815, 0, 0, 0), (0, 0.1096000000834465, 0, 0), (0, 0, 0.07970000058412552, 0), (-0.011099999770522118, 0.0414000004529953, -0.0007999999797903001, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Cube "Head" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3[] extent = [(-0.0609, -0.1096, -0.0797), (0.0609, 0.1096, 0.0797)]
                    rel material:binding = </smplx_humanoid/bodies/Head/visuals/Looks/material_rgba>
                    matrix4d xformOp:transform = ( (0.0608999989926815, 0, 0, 0), (0, 0.1096000000834465, 0, 0), (0, 0, 0.07970000058412552, 0), (-0.011099999770522118, 0.0414000004529953, -0.0007999999797903001, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/Head/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/Head/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/Head/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "L_Thorax" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.04479999840259552, 0.027500007301568985, -0.00029999855905771255, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "L_Thorax" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.08885352, -0.0488, -0.0488), (0.08885352, 0.0488, 0.0488)]
                    double height = 0.08010704815387726
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.04879999905824661
                    matrix4d xformOp:transform = ( (0.8938040059740229, 0.43317023104740393, -0.11609461258400211, 0), (-0.43317023104740393, 0.9009208767852708, 0.02655434653707267, 0), (0.11609461258400211, 0.02655434653707267, 0.9928831291887521, 0), (0.05959999933838844, 0.028850000351667404, -0.007750000339001417, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "L_Thorax" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.08885352, -0.0488, -0.0488), (0.08885352, 0.0488, 0.0488)]
                    double height = 0.08010704815387726
                    rel material:binding = </smplx_humanoid/bodies/L_Thorax/visuals/Looks/material_rgba>
                    double radius = 0.04879999905824661
                    matrix4d xformOp:transform = ( (0.8938040059740229, 0.43317023104740393, -0.11609461258400211, 0), (-0.43317023104740393, 0.9009208767852708, 0.02655434653707267, 0), (0.11609461258400211, 0.02655434653707267, 0.9928831291887521, 0), (0.05959999933838844, 0.028850000351667404, -0.007750000339001417, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/L_Thorax/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/L_Thorax/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/L_Thorax/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "L_Shoulder" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            prepend rel physics:filteredPairs = </smplx_humanoid/bodies/Chest>
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.164000004529953, 0.08520001173019409, -0.015799999237060547, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "L_Shoulder" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.13248293, -0.0522, -0.0522), (0.13248293, 0.0522, 0.0522)]
                    double height = 0.16056585311889648
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.05220000073313713
                    matrix4d xformOp:transform = ( (0.9497660939909589, -0.26967141281648566, -0.15881340551743506, 0), (0.26967141281648566, 0.9627018493852826, -0.02196542175813221, 0), (0.15881340551743506, -0.02196542175813221, 0.9870642446056763, 0), (0.1270499974489212, -0.03604999929666519, -0.021250002086162567, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "L_Shoulder" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.13248293, -0.0522, -0.0522), (0.13248293, 0.0522, 0.0522)]
                    double height = 0.16056585311889648
                    rel material:binding = </smplx_humanoid/bodies/L_Shoulder/visuals/Looks/material_rgba>
                    double radius = 0.05220000073313713
                    matrix4d xformOp:transform = ( (0.9497660939909589, -0.26967141281648566, -0.15881340551743506, 0), (0.26967141281648566, 0.9627018493852826, -0.02196542175813221, 0), (0.15881340551743506, -0.02196542175813221, 0.9870642446056763, 0), (0.1270499974489212, -0.03604999929666519, -0.021250002086162567, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/L_Shoulder/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/L_Shoulder/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/L_Shoulder/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "L_Elbow" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.4180999994277954, 0.013000011444091797, -0.05829999968409538, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "L_Elbow" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.11602709, -0.0401, -0.0401), (0.11602709, 0.0401, 0.0401)]
                    double height = 0.15185417234897614
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.04010000079870224
                    matrix4d xformOp:transform = ( (0.9956920738769695, 0.09219393254791441, -0.00987792107861396, 0), (-0.09219393254791441, 0.9957409658480216, 0.0004563250754326953, 0), (0.00987792107861396, 0.0004563250754326953, 0.9999511080289478, 0), (0.12600000202655792, 0.011599999852478504, -0.0012500000884756446, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "L_Elbow" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.11602709, -0.0401, -0.0401), (0.11602709, 0.0401, 0.0401)]
                    double height = 0.15185417234897614
                    rel material:binding = </smplx_humanoid/bodies/L_Elbow/visuals/Looks/material_rgba>
                    double radius = 0.04010000079870224
                    matrix4d xformOp:transform = ( (0.9956920738769695, 0.09219393254791441, -0.00987792107861396, 0), (-0.09219393254791441, 0.9957409658480216, 0.0004563250754326953, 0), (0.00987792107861396, 0.0004563250754326953, 0.9999511080289478, 0), (0.12600000202655792, 0.011599999852478504, -0.0012500000884756446, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/L_Elbow/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/L_Elbow/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/L_Elbow/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "L_Wrist" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.6700999736785889, 0.036200009286403656, -0.06080000102519989, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Cube "L_Wrist" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.0484, -0.0122, -0.046), (0.0484, 0.0122, 0.046)]
                    uniform token physics:approximation = "boundingCube"
                    uniform token purpose = "guide"
                    matrix4d xformOp:transform = ( (0.04839999973773956, 0, 0, 0), (0, 0.012199999764561653, 0, 0), (0, 0, 0.04600000008940697, 0), (0.052299998700618744, -0.0013000000035390258, -0.003100000089034438, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Cube "L_Wrist" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3[] extent = [(-0.0484, -0.0122, -0.046), (0.0484, 0.0122, 0.046)]
                    rel material:binding = </smplx_humanoid/bodies/L_Wrist/visuals/Looks/material_rgba>
                    matrix4d xformOp:transform = ( (0.04839999973773956, 0, 0, 0), (0, 0.012199999764561653, 0, 0), (0, 0, 0.04600000008940697, 0), (0.052299998700618744, -0.0013000000035390258, -0.003100000089034438, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/L_Wrist/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/L_Wrist/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/L_Wrist/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "L_Index1" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.7719999551773071, 0.027500009164214134, -0.0414000004529953, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "L_Index1" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.018767472, -0.0091, -0.0091), (0.018767472, 0.0091, 0.0091)]
                    double height = 0.01933494210243225
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.009100000374019146
                    matrix4d xformOp:transform = ( (0.9930207720234776, 0.07240789739336728, 0.09309587551475573, 0), (-0.07240789739336728, 0.9973693681784397, -0.00338224118364705, 0), (-0.09309587551475573, -0.00338224118364705, 0.9956514038450379, 0), (0.01599999889731407, 0.0010999999940395355, 0.001500000013038516, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "L_Index1" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.018767472, -0.0091, -0.0091), (0.018767472, 0.0091, 0.0091)]
                    double height = 0.01933494210243225
                    rel material:binding = </smplx_humanoid/bodies/L_Index1/visuals/Looks/material_rgba>
                    double radius = 0.009100000374019146
                    matrix4d xformOp:transform = ( (0.9930207720234776, 0.07240789739336728, 0.09309587551475573, 0), (-0.07240789739336728, 0.9973693681784397, -0.00338224118364705, 0), (-0.09309587551475573, -0.00338224118364705, 0.9956514038450379, 0), (0.01599999889731407, 0.0010999999940395355, 0.001500000013038516, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/L_Index1/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/L_Index1/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/L_Index1/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "L_Index2" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.8038999438285828, 0.029700009152293205, -0.03840000182390213, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "L_Index2" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.014386199, -0.0076, -0.0076), (0.014386199, 0.0076, 0.0076)]
                    double height = 0.013572397641837597
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.007600000128149986
                    matrix4d xformOp:transform = ( (0.994665741959271, -0.10315067779192866, 0, 0), (0.10315067779192866, 0.994665741959271, 0, 0), (0, 0, 1, 0), (0.011249999515712261, -0.0012000000569969416, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "L_Index2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.014386199, -0.0076, -0.0076), (0.014386199, 0.0076, 0.0076)]
                    double height = 0.013572397641837597
                    rel material:binding = </smplx_humanoid/bodies/L_Index2/visuals/Looks/material_rgba>
                    double radius = 0.007600000128149986
                    matrix4d xformOp:transform = ( (0.994665741959271, -0.10315067779192866, 0, 0), (0.10315067779192866, 0.994665741959271, 0, 0), (0, 0, 1, 0), (0.011249999515712261, -0.0012000000569969416, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/L_Index2/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/L_Index2/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/L_Index2/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "L_Index3" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.8263999223709106, 0.02730000950396061, -0.03830000013113022, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "L_Index3" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.013775127, -0.0064, -0.0064), (0.013775127, 0.0064, 0.0064)]
                    double height = 0.014750254340469837
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.006399999838322401
                    matrix4d xformOp:transform = ( (0.9965929984929085, -0.01355907658500577, 0.08135445206580272, 0), (0.01355907658500577, 0.9999079188617906, 0.0005524867787015941, 0), (-0.08135445206580272, 0.0005524867787015941, 0.9966850796311179, 0), (0.012250000610947609, -0.00020000000949949026, 0.0009999999310821295, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "L_Index3" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.013775127, -0.0064, -0.0064), (0.013775127, 0.0064, 0.0064)]
                    double height = 0.014750254340469837
                    rel material:binding = </smplx_humanoid/bodies/L_Index3/visuals/Looks/material_rgba>
                    double radius = 0.006399999838322401
                    matrix4d xformOp:transform = ( (0.9965929984929085, -0.01355907658500577, 0.08135445206580272, 0), (0.01355907658500577, 0.9999079188617906, 0.0005524867787015941, 0), (-0.08135445206580272, 0.0005524867787015941, 0.9966850796311179, 0), (0.012250000610947609, -0.00020000000949949026, 0.0009999999310821295, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/L_Index3/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/L_Index3/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/L_Index3/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "L_Middle1" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.7794999480247498, 0.02990000881254673, -0.06480000168085098, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "L_Middle1" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.018680084, -0.0094, -0.0094), (0.018680084, 0.0094, 0.0094)]
                    double height = 0.018560171127319336
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.009399999864399433
                    matrix4d xformOp:transform = ( (0.9913701419933079, 0.021551474084262945, -0.12930884078833316, 0), (-0.021551474084262945, 0.9997667605813663, 0.0013994364715727015, 0), (0.12930884078833316, 0.0013994364715727015, 0.9916033814119416, 0), (0.015300000086426735, 0.0004000000189989805, -0.001999999862164259, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "L_Middle1" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.018680084, -0.0094, -0.0094), (0.018680084, 0.0094, 0.0094)]
                    double height = 0.018560171127319336
                    rel material:binding = </smplx_humanoid/bodies/L_Middle1/visuals/Looks/material_rgba>
                    double radius = 0.009399999864399433
                    matrix4d xformOp:transform = ( (0.9913701419933079, 0.021551474084262945, -0.12930884078833316, 0), (-0.021551474084262945, 0.9997667605813663, 0.0013994364715727015, 0), (0.12930884078833316, 0.0013994364715727015, 0.9916033814119416, 0), (0.015300000086426735, 0.0004000000189989805, -0.001999999862164259, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/L_Middle1/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/L_Middle1/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/L_Middle1/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "L_Middle2" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.8100999593734741, 0.03070000931620598, -0.06880000233650208, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "L_Middle2" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.014185054, -0.007, -0.007), (0.014185054, 0.007, 0.007)]
                    double height = 0.014370108023285866
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.007000000216066837
                    matrix4d xformOp:transform = ( (0.9812034956445614, -0.08350667290930858, -0.17397223151998276, 0), (0.08350667290930858, 0.9964802383342642, -0.007332836647336749, 0), (0.17397223151998276, -0.007332836647336749, 0.9847232573102972, 0), (0.011749999597668648, -0.0009999999310821295, -0.002050000010058284, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "L_Middle2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.014185054, -0.007, -0.007), (0.014185054, 0.007, 0.007)]
                    double height = 0.014370108023285866
                    rel material:binding = </smplx_humanoid/bodies/L_Middle2/visuals/Looks/material_rgba>
                    double radius = 0.007000000216066837
                    matrix4d xformOp:transform = ( (0.9812034956445614, -0.08350667290930858, -0.17397223151998276, 0), (0.08350667290930858, 0.9964802383342642, -0.007332836647336749, 0), (0.17397223151998276, -0.007332836647336749, 0.9847232573102972, 0), (0.011749999597668648, -0.0009999999310821295, -0.002050000010058284, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/L_Middle2/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/L_Middle2/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/L_Middle2/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "L_Middle3" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.8335999846458435, 0.028700008988380432, -0.07290000468492508, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "L_Middle3" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.013777565, -0.0061, -0.0061), (0.013777565, 0.0061, 0.0061)]
                    double height = 0.015355129726231098
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.006099999882280827
                    matrix4d xformOp:transform = ( (0.996409714739503, 0, -0.08466215184743664, 0), (0, 1, 0, 0), (0.08466215184743664, 0, 0.996409714739503, 0), (0.012750000692903996, 0, -0.0010499999625608325, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "L_Middle3" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.013777565, -0.0061, -0.0061), (0.013777565, 0.0061, 0.0061)]
                    double height = 0.015355129726231098
                    rel material:binding = </smplx_humanoid/bodies/L_Middle3/visuals/Looks/material_rgba>
                    double radius = 0.006099999882280827
                    matrix4d xformOp:transform = ( (0.996409714739503, 0, -0.08466215184743664, 0), (0, 1, 0, 0), (0.08466215184743664, 0, 0.996409714739503, 0), (0.012750000692903996, 0, -0.0010499999625608325, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/L_Middle3/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/L_Middle3/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/L_Middle3/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "L_Pinky1" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.75409996509552, 0.02170000970363617, -0.10449999570846558, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "L_Pinky1" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.012591095, -0.0067, -0.0067), (0.012591095, 0.0067, 0.0067)]
                    double height = 0.011782189831137657
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.0066999997943639755
                    matrix4d xformOp:transform = ( (0.7893268389682084, -0.05941171933369693, -0.6110919863974651, 0), (0.05941171933369693, 0.9980273295716724, -0.020290324940496207, 0), (0.6110919863974651, -0.020290324940496207, 0.791299509396536, 0), (0.007750000339001417, -0.0005499999970197678, -0.006000000052154064, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "L_Pinky1" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.012591095, -0.0067, -0.0067), (0.012591095, 0.0067, 0.0067)]
                    double height = 0.011782189831137657
                    rel material:binding = </smplx_humanoid/bodies/L_Pinky1/visuals/Looks/material_rgba>
                    double radius = 0.0066999997943639755
                    matrix4d xformOp:transform = ( (0.7893268389682084, -0.05941171933369693, -0.6110919863974651, 0), (0.05941171933369693, 0.9980273295716724, -0.020290324940496207, 0), (0.6110919863974651, -0.020290324940496207, 0.791299509396536, 0), (0.007750000339001417, -0.0005499999970197678, -0.006000000052154064, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/L_Pinky1/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/L_Pinky1/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/L_Pinky1/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "L_Pinky2" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.769599974155426, 0.020600009709596634, -0.11649999767541885, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "L_Pinky2" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.012282085, -0.0065, -0.0065), (0.012282085, 0.0065, 0.0065)]
                    double height = 0.011564168147742748
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.006500000134110451
                    matrix4d xformOp:transform = ( (0.8042083072098207, -0.0864740016287513, -0.5880231884307108, 0), (0.0864740016287513, 0.9958553829900327, -0.028183394582433685, 0), (0.5880231884307108, -0.028183394582433685, 0.808352924219788, 0), (0.007750000339001417, -0.000800000037997961, -0.00559999980032444, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "L_Pinky2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.012282085, -0.0065, -0.0065), (0.012282085, 0.0065, 0.0065)]
                    double height = 0.011564168147742748
                    rel material:binding = </smplx_humanoid/bodies/L_Pinky2/visuals/Looks/material_rgba>
                    double radius = 0.006500000134110451
                    matrix4d xformOp:transform = ( (0.8042083072098207, -0.0864740016287513, -0.5880231884307108, 0), (0.0864740016287513, 0.9958553829900327, -0.028183394582433685, 0), (0.5880231884307108, -0.028183394582433685, 0.808352924219788, 0), (0.007750000339001417, -0.000800000037997961, -0.00559999980032444, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/L_Pinky2/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/L_Pinky2/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/L_Pinky2/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "L_Pinky3" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.785099983215332, 0.018900008872151375, -0.12770000100135803, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "L_Pinky3" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.010950841, -0.005, -0.005), (0.010950841, 0.005, 0.005)]
                    double height = 0.011901681311428547
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.004999999888241291
                    matrix4d xformOp:transform = ( (0.8822283591995739, 0.016804350322193073, -0.4705217801098627, 0), (-0.016804350322193073, 0.9998499724136878, 0.004200772158623467, 0), (0.4705217801098627, 0.004200772158623467, 0.8823783867858861, 0), (0.008750000037252903, 0.00020000000949949026, -0.004600000102072954, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "L_Pinky3" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.010950841, -0.005, -0.005), (0.010950841, 0.005, 0.005)]
                    double height = 0.011901681311428547
                    rel material:binding = </smplx_humanoid/bodies/L_Pinky3/visuals/Looks/material_rgba>
                    double radius = 0.004999999888241291
                    matrix4d xformOp:transform = ( (0.8822283591995739, 0.016804350322193073, -0.4705217801098627, 0), (-0.016804350322193073, 0.9998499724136878, 0.004200772158623467, 0), (0.4705217801098627, 0.004200772158623467, 0.8823783867858861, 0), (0.008750000037252903, 0.00020000000949949026, -0.004600000102072954, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/L_Pinky3/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/L_Pinky3/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/L_Pinky3/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "L_Ring1" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.7674999833106995, 0.02690000832080841, -0.08810000121593475, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "L_Ring1" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.016553655, -0.008, -0.008), (0.016553655, 0.008, 0.008)]
                    double height = 0.01710730791091919
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.00800000037997961
                    matrix4d xformOp:transform = ( (0.9820364130910659, 0.05260911643940691, -0.18120916895745243, 0), (-0.05260911643940691, 0.9986035981899278, 0.004809828194421439, 0), (0.18120916895745243, 0.004809828194421439, 0.9834328149011381, 0), (0.0139999995008111, 0.000750000006519258, -0.0026499999221414328, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "L_Ring1" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.016553655, -0.008, -0.008), (0.016553655, 0.008, 0.008)]
                    double height = 0.01710730791091919
                    rel material:binding = </smplx_humanoid/bodies/L_Ring1/visuals/Looks/material_rgba>
                    double radius = 0.00800000037997961
                    matrix4d xformOp:transform = ( (0.9820364130910659, 0.05260911643940691, -0.18120916895745243, 0), (-0.05260911643940691, 0.9986035981899278, 0.004809828194421439, 0), (0.18120916895745243, 0.004809828194421439, 0.9834328149011381, 0), (0.0139999995008111, 0.000750000006519258, -0.0026499999221414328, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/L_Ring1/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/L_Ring1/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/L_Ring1/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "L_Ring2" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.7954999804496765, 0.028400007635354996, -0.0934000015258789, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "L_Ring2" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.014593573, -0.0074, -0.0074), (0.014593573, 0.0074, 0.0074)]
                    double height = 0.01438714750111103
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.007400000002235174
                    matrix4d xformOp:transform = ( (0.9522389199953161, -0.06255578463449885, -0.2988775878063894, 0), (0.06255578463449885, 0.9979955187990865, -0.009576964139010768, 0), (0.2988775878063894, -0.009576964139010768, 0.9542434011962295, 0), (0.01145000010728836, -0.000750000006519258, -0.0035500000230968, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "L_Ring2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.014593573, -0.0074, -0.0074), (0.014593573, 0.0074, 0.0074)]
                    double height = 0.01438714750111103
                    rel material:binding = </smplx_humanoid/bodies/L_Ring2/visuals/Looks/material_rgba>
                    double radius = 0.007400000002235174
                    matrix4d xformOp:transform = ( (0.9522389199953161, -0.06255578463449885, -0.2988775878063894, 0), (0.06255578463449885, 0.9979955187990865, -0.009576964139010768, 0), (0.2988775878063894, -0.009576964139010768, 0.9542434011962295, 0), (0.01145000010728836, -0.000750000006519258, -0.0035500000230968, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/L_Ring2/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/L_Ring2/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/L_Ring2/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "L_Ring3" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.8183000087738037, 0.02690000832080841, -0.10050000250339508, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "L_Ring3" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.013311012, -0.0057, -0.0057), (0.013311012, 0.0057, 0.0057)]
                    double height = 0.015222023241221905
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.00570000009611249
                    matrix4d xformOp:transform = ( (0.9788449391872851, 0.019708265646045442, -0.2036520746369339, 0), (-0.019708265646045442, 0.999803715923527, 0.002028268753315715, 0), (0.2036520746369339, 0.002028268753315715, 0.9790412232637581, 0), (0.012450000271201134, 0.00024999998277053237, -0.0025500000920146704, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "L_Ring3" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.013311012, -0.0057, -0.0057), (0.013311012, 0.0057, 0.0057)]
                    double height = 0.015222023241221905
                    rel material:binding = </smplx_humanoid/bodies/L_Ring3/visuals/Looks/material_rgba>
                    double radius = 0.00570000009611249
                    matrix4d xformOp:transform = ( (0.9788449391872851, 0.019708265646045442, -0.2036520746369339, 0), (-0.019708265646045442, 0.999803715923527, 0.002028268753315715, 0), (0.2036520746369339, 0.002028268753315715, 0.9790412232637581, 0), (0.012450000271201134, 0.00024999998277053237, -0.0025500000920146704, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/L_Ring3/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/L_Ring3/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/L_Ring3/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "L_Thumb1" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.7106999754905701, 0.018200010061264038, -0.03519999980926514, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "L_Thumb1" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.02107469, -0.012, -0.012), (0.02107469, 0.012, 0.012)]
                    double height = 0.018149379640817642
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.012000000104308128
                    matrix4d xformOp:transform = ( (0.5620027216189483, 0.033058976810403706, 0.8264744630586733, 0), (-0.033058976810403706, 0.999300323908801, -0.017491903185784308, 0), (-0.8264744630586733, -0.017491903185784308, 0.5627023977101473, 0), (0.008500000461935997, 0.0004999999655410647, 0.01249999925494194, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "L_Thumb1" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.02107469, -0.012, -0.012), (0.02107469, 0.012, 0.012)]
                    double height = 0.018149379640817642
                    rel material:binding = </smplx_humanoid/bodies/L_Thumb1/visuals/Looks/material_rgba>
                    double radius = 0.012000000104308128
                    matrix4d xformOp:transform = ( (0.5620027216189483, 0.033058976810403706, 0.8264744630586733, 0), (-0.033058976810403706, 0.999300323908801, -0.017491903185784308, 0), (-0.8264744630586733, -0.017491903185784308, 0.5627023977101473, 0), (0.008500000461935997, 0.0004999999655410647, 0.01249999925494194, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/L_Thumb1/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/L_Thumb1/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/L_Thumb1/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "L_Thumb2" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.7276999950408936, 0.01920001022517681, -0.010199999436736107, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "L_Thumb2" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.017364318, -0.0095, -0.0095), (0.017364318, 0.0095, 0.0095)]
                    double height = 0.01572863571345806
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.009499999694526196
                    matrix4d xformOp:transform = ( (0.7820131019016169, -0.19709272290748636, 0.591278267182183, 0), (0.19709272290748636, 0.9782013167240179, 0.06539606071770576, 0), (-0.591278267182183, 0.06539606071770576, 0.803811785177599, 0), (0.010250000283122063, -0.0025500000920146704, 0.007750000339001417, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "L_Thumb2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.017364318, -0.0095, -0.0095), (0.017364318, 0.0095, 0.0095)]
                    double height = 0.01572863571345806
                    rel material:binding = </smplx_humanoid/bodies/L_Thumb2/visuals/Looks/material_rgba>
                    double radius = 0.009499999694526196
                    matrix4d xformOp:transform = ( (0.7820131019016169, -0.19709272290748636, 0.591278267182183, 0), (0.19709272290748636, 0.9782013167240179, 0.06539606071770576, 0), (-0.591278267182183, 0.06539606071770576, 0.803811785177599, 0), (0.010250000283122063, -0.0025500000920146704, 0.007750000339001417, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/L_Thumb2/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/L_Thumb2/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/L_Thumb2/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "L_Thumb3" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.748199999332428, 0.01400000974535942, 0.005300000309944153, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "L_Thumb3" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.017303923, -0.0087, -0.0087), (0.017303923, 0.0087, 0.0087)]
                    double height = 0.01720784604549408
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.008700000122189522
                    matrix4d xformOp:transform = ( (0.7845257614513106, -0.11041473100909238, 0.6101868095290435, 0), (0.11041473100909238, 0.9931682622512661, 0.03775434873899042, 0), (-0.6101868095290435, 0.03775434873899042, 0.7913574992000445, 0), (0.011249999515712261, -0.0015499999281018972, 0.008750000037252903, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "L_Thumb3" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.017303923, -0.0087, -0.0087), (0.017303923, 0.0087, 0.0087)]
                    double height = 0.01720784604549408
                    rel material:binding = </smplx_humanoid/bodies/L_Thumb3/visuals/Looks/material_rgba>
                    double radius = 0.008700000122189522
                    matrix4d xformOp:transform = ( (0.7845257614513106, -0.11041473100909238, 0.6101868095290435, 0), (0.11041473100909238, 0.9931682622512661, 0.03775434873899042, 0), (-0.6101868095290435, 0.03775434873899042, 0.7913574992000445, 0), (0.011249999515712261, -0.0015499999281018972, 0.008750000037252903, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/L_Thumb3/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/L_Thumb3/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/L_Thumb3/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "R_Thorax" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.049300000071525574, 0.026900004595518112, -0.0064999982714653015, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "R_Thorax" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.08853826, -0.0536, -0.0536), (0.08853826, 0.0536, 0.0536)]
                    double height = 0.069876529276371
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.053599998354911804
                    matrix4d xformOp:transform = ( (-0.8815550050342953, 0.45938167823406495, -0.10876326677158499, 0), (-0.45938167823406495, -0.7816821694441458, 0.42183130559833515, 0), (0.10876326677158499, 0.42183130559833515, 0.9001271644098505, 0), (-0.05129999667406082, 0.026750002056360245, -0.006299999542534351, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "R_Thorax" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.08853826, -0.0536, -0.0536), (0.08853826, 0.0536, 0.0536)]
                    double height = 0.069876529276371
                    rel material:binding = </smplx_humanoid/bodies/R_Thorax/visuals/Looks/material_rgba>
                    double radius = 0.053599998354911804
                    matrix4d xformOp:transform = ( (-0.8815550050342953, 0.45938167823406495, -0.10876326677158499, 0), (-0.45938167823406495, -0.7816821694441458, 0.42183130559833515, 0), (0.10876326677158499, 0.42183130559833515, 0.9001271644098505, 0), (-0.05129999667406082, 0.026750002056360245, -0.006299999542534351, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/R_Thorax/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/R_Thorax/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/R_Thorax/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "R_Shoulder" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            prepend rel physics:filteredPairs = </smplx_humanoid/bodies/Chest>
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.15189999341964722, 0.0804000049829483, -0.019199997186660767, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "R_Shoulder" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.13456774, -0.0521, -0.0521), (0.13456774, 0.0521, 0.0521)]
                    double height = 0.16493546962738037
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.05209999904036522
                    matrix4d xformOp:transform = ( (-0.9864466381090793, -0.13277931601312432, -0.09640140387337937, 0), (0.13277931601312432, -0.30078341718871826, -0.9444042288921679, 0), (0.09640140387337937, -0.9444042288921679, 0.314336779079639, 0), (-0.13555000722408295, -0.0182499997317791, -0.013249999843537807, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "R_Shoulder" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.13456774, -0.0521, -0.0521), (0.13456774, 0.0521, 0.0521)]
                    double height = 0.16493546962738037
                    rel material:binding = </smplx_humanoid/bodies/R_Shoulder/visuals/Looks/material_rgba>
                    double radius = 0.05209999904036522
                    matrix4d xformOp:transform = ( (-0.9864466381090793, -0.13277931601312432, -0.09640140387337937, 0), (0.13277931601312432, -0.30078341718871826, -0.9444042288921679, 0), (0.09640140387337937, -0.9444042288921679, 0.314336779079639, 0), (-0.13555000722408295, -0.0182499997317791, -0.013249999843537807, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/R_Shoulder/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/R_Shoulder/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/R_Shoulder/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "R_Elbow" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.4230000078678131, 0.043900005519390106, -0.04569999873638153, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "R_Elbow" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.11530357, -0.0404, -0.0404), (0.11530357, 0.0404, 0.0404)]
                    double height = 0.1498071402311325
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.04039999842643738
                    matrix4d xformOp:transform = ( (-0.9979496940500852, -0.018023279924976432, -0.061412654129414435, 0), (0.018023279924976432, 0.8415636380801104, -0.5398572033842299, 0), (0.061412654129414435, -0.5398572033842299, -0.8395133321301955, 0), (-0.12464999407529831, -0.0022499999031424522, -0.007699999958276749, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "R_Elbow" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.11530357, -0.0404, -0.0404), (0.11530357, 0.0404, 0.0404)]
                    double height = 0.1498071402311325
                    rel material:binding = </smplx_humanoid/bodies/R_Elbow/visuals/Looks/material_rgba>
                    double radius = 0.04039999842643738
                    matrix4d xformOp:transform = ( (-0.9979496940500852, -0.018023279924976432, -0.061412654129414435, 0), (0.018023279924976432, 0.8415636380801104, -0.5398572033842299, 0), (0.061412654129414435, -0.5398572033842299, -0.8395133321301955, 0), (-0.12464999407529831, -0.0022499999031424522, -0.007699999958276749, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/R_Elbow/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/R_Elbow/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/R_Elbow/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "R_Wrist" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.6722999811172485, 0.03940000385046005, -0.060999996960163116, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Cube "R_Wrist" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.0454, -0.0122, -0.046), (0.0454, 0.0122, 0.046)]
                    uniform token physics:approximation = "boundingCube"
                    uniform token purpose = "guide"
                    matrix4d xformOp:transform = ( (0.04540000110864639, 0, 0, 0), (0, 0.012199999764561653, 0, 0), (0, 0, 0.04600000008940697, 0), (-0.053700000047683716, -0.004399999976158142, -0.002899999963119626, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Cube "R_Wrist" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3[] extent = [(-0.0454, -0.0122, -0.046), (0.0454, 0.0122, 0.046)]
                    rel material:binding = </smplx_humanoid/bodies/R_Wrist/visuals/Looks/material_rgba>
                    matrix4d xformOp:transform = ( (0.04540000110864639, 0, 0, 0), (0, 0.012199999764561653, 0, 0), (0, 0, 0.04600000008940697, 0), (-0.053700000047683716, -0.004399999976158142, -0.002899999963119626, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/R_Wrist/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/R_Wrist/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/R_Wrist/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "R_Index1" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.7721999883651733, 0.02760000340640545, -0.041399996727705, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "R_Index1" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.018767472, -0.0091, -0.0091), (0.018767472, 0.0091, 0.0091)]
                    double height = 0.01933494210243225
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.009100000374019146
                    matrix4d xformOp:transform = ( (-0.99302090631992, 0.07240791363074717, 0.09309590404391743, 0), (-0.07240791363074717, 0.24878457935707843, -0.9658485545257776, 0), (-0.09309590404391743, -0.9658485545257776, -0.24180548567699844, 0), (-0.01599999889731407, 0.0010999999940395355, 0.001500000013038516, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "R_Index1" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.018767472, -0.0091, -0.0091), (0.018767472, 0.0091, 0.0091)]
                    double height = 0.01933494210243225
                    rel material:binding = </smplx_humanoid/bodies/R_Index1/visuals/Looks/material_rgba>
                    double radius = 0.009100000374019146
                    matrix4d xformOp:transform = ( (-0.99302090631992, 0.07240791363074717, 0.09309590404391743, 0), (-0.07240791363074717, 0.24878457935707843, -0.9658485545257776, 0), (-0.09309590404391743, -0.9658485545257776, -0.24180548567699844, 0), (-0.01599999889731407, 0.0010999999940395355, 0.001500000013038516, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/R_Index1/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/R_Index1/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/R_Index1/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "R_Index2" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.804099977016449, 0.02980000339448452, -0.03839999809861183, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "R_Index2" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.014386199, -0.0076, -0.0076), (0.014386199, 0.0076, 0.0076)]
                    double height = 0.013572397641837597
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.007600000128149986
                    matrix4d xformOp:transform = ( (-0.9946658462514506, -0.10315077452022692, 0, 0), (0.10315077452022692, -0.9946658462514506, 0, 0), (0, 0, 1, 0), (-0.011249999515712261, -0.0012000000569969416, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "R_Index2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.014386199, -0.0076, -0.0076), (0.014386199, 0.0076, 0.0076)]
                    double height = 0.013572397641837597
                    rel material:binding = </smplx_humanoid/bodies/R_Index2/visuals/Looks/material_rgba>
                    double radius = 0.007600000128149986
                    matrix4d xformOp:transform = ( (-0.9946658462514506, -0.10315077452022692, 0, 0), (0.10315077452022692, -0.9946658462514506, 0, 0), (0, 0, 1, 0), (-0.011249999515712261, -0.0012000000569969416, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/R_Index2/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/R_Index2/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/R_Index2/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "R_Index3" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.8265999555587769, 0.027500003576278687, -0.03829999640583992, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "R_Index3" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.012880008, -0.0067, -0.0067), (0.012880008, 0.0067, 0.0067)]
                    double height = 0.012360015884041786
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.0066999997943639755
                    matrix4d xformOp:transform = ( (-0.9951444250004986, -0.01618123753990952, 0.09708741349182137, 0), (0.01618123753990952, 0.9460771650059865, 0.32353697081591193, 0), (-0.09708741349182137, 0.32353697081591193, -0.9412215900064851, 0), (-0.010250000283122063, -0.00020000000949949026, 0.0009999999310821295, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "R_Index3" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.012880008, -0.0067, -0.0067), (0.012880008, 0.0067, 0.0067)]
                    double height = 0.012360015884041786
                    rel material:binding = </smplx_humanoid/bodies/R_Index3/visuals/Looks/material_rgba>
                    double radius = 0.0066999997943639755
                    matrix4d xformOp:transform = ( (-0.9951444250004986, -0.01618123753990952, 0.09708741349182137, 0), (0.01618123753990952, 0.9460771650059865, 0.32353697081591193, 0), (-0.09708741349182137, 0.32353697081591193, -0.9412215900064851, 0), (-0.010250000283122063, -0.00020000000949949026, 0.0009999999310821295, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/R_Index3/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/R_Index3/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/R_Index3/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "R_Middle1" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.779699981212616, 0.030000004917383194, -0.06469999998807907, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "R_Middle1" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.018680084, -0.0094, -0.0094), (0.018680084, 0.0094, 0.0094)]
                    double height = 0.018560171127319336
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.009399999864399433
                    matrix4d xformOp:transform = ( (-0.991370253655619, 0.021551462365156926, -0.12930876636031208, 0), (-0.021551462365156926, 0.9461791759912881, 0.32292492449671073, 0), (0.12930876636031208, 0.32292492449671073, -0.9375494296469071, 0), (-0.015300000086426735, 0.0004000000189989805, -0.001999999862164259, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "R_Middle1" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.018680084, -0.0094, -0.0094), (0.018680084, 0.0094, 0.0094)]
                    double height = 0.018560171127319336
                    rel material:binding = </smplx_humanoid/bodies/R_Middle1/visuals/Looks/material_rgba>
                    double radius = 0.009399999864399433
                    matrix4d xformOp:transform = ( (-0.991370253655619, 0.021551462365156926, -0.12930876636031208, 0), (-0.021551462365156926, 0.9461791759912881, 0.32292492449671073, 0), (0.12930876636031208, 0.32292492449671073, -0.9375494296469071, 0), (-0.015300000086426735, 0.0004000000189989805, -0.001999999862164259, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/R_Middle1/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/R_Middle1/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/R_Middle1/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "R_Middle2" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.8102999925613403, 0.030800005421042442, -0.06870000064373016, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "R_Middle2" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.014185054, -0.007, -0.007), (0.014185054, 0.007, 0.007)]
                    double height = 0.014370108023285866
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.007000000216066837
                    matrix4d xformOp:transform = ( (-0.9812038297542145, -0.08350670556318285, -0.17397230036745626, 0), (0.08350670556318285, 0.6290073352587839, -0.7729013720418862, 0), (0.17397230036745626, -0.7729013720418862, -0.6102111650129984, 0), (-0.011749999597668648, -0.0009999999310821295, -0.002050000010058284, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "R_Middle2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.014185054, -0.007, -0.007), (0.014185054, 0.007, 0.007)]
                    double height = 0.014370108023285866
                    rel material:binding = </smplx_humanoid/bodies/R_Middle2/visuals/Looks/material_rgba>
                    double radius = 0.007000000216066837
                    matrix4d xformOp:transform = ( (-0.9812038297542145, -0.08350670556318285, -0.17397230036745626, 0), (0.08350670556318285, 0.6290073352587839, -0.7729013720418862, 0), (0.17397230036745626, -0.7729013720418862, -0.6102111650129984, 0), (-0.011749999597668648, -0.0009999999310821295, -0.002050000010058284, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/R_Middle2/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/R_Middle2/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/R_Middle2/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "R_Middle3" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.8338000178337097, 0.028800005093216896, -0.07280000299215317, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "R_Middle3" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.012882669, -0.0064, -0.0064), (0.012882669, 0.0064, 0.0064)]
                    double height = 0.012965339235961437
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.006399999838322401
                    matrix4d xformOp:transform = ( (-0.9949603873515187, 0, -0.1002678235319876, 0), (0, 1, 0, 0), (0.1002678235319876, 0, -0.9949603873515187, 0), (-0.01075000036507845, 0, -0.0010499999625608325, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "R_Middle3" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.012882669, -0.0064, -0.0064), (0.012882669, 0.0064, 0.0064)]
                    double height = 0.012965339235961437
                    rel material:binding = </smplx_humanoid/bodies/R_Middle3/visuals/Looks/material_rgba>
                    double radius = 0.006399999838322401
                    matrix4d xformOp:transform = ( (-0.9949603873515187, 0, -0.1002678235319876, 0), (0, 1, 0, 0), (0.1002678235319876, 0, -0.9949603873515187, 0), (-0.01075000036507845, 0, -0.0010499999625608325, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/R_Middle3/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/R_Middle3/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/R_Middle3/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "R_Pinky1" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.7542999982833862, 0.021800003945827484, -0.10449999570846558, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "R_Pinky1" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.012591095, -0.0067, -0.0067), (0.012591095, 0.0067, 0.0067)]
                    double height = 0.011782189831137657
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.0066999997943639755
                    matrix4d xformOp:transform = ( (-0.7893273463431854, -0.05941171104460352, -0.6110919181931322, 0), (0.05941171104460352, 0.9832453601101179, -0.17233344821960372, 0), (0.6110919181931322, -0.17233344821960372, -0.7725727064533032, 0), (-0.007750000339001417, -0.0005499999970197678, -0.006000000052154064, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "R_Pinky1" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.012591095, -0.0067, -0.0067), (0.012591095, 0.0067, 0.0067)]
                    double height = 0.011782189831137657
                    rel material:binding = </smplx_humanoid/bodies/R_Pinky1/visuals/Looks/material_rgba>
                    double radius = 0.0066999997943639755
                    matrix4d xformOp:transform = ( (-0.7893273463431854, -0.05941171104460352, -0.6110919181931322, 0), (0.05941171104460352, 0.9832453601101179, -0.17233344821960372, 0), (0.6110919181931322, -0.17233344821960372, -0.7725727064533032, 0), (-0.007750000339001417, -0.0005499999970197678, -0.006000000052154064, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/R_Pinky1/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/R_Pinky1/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/R_Pinky1/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "R_Pinky2" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.7698000073432922, 0.02070000395178795, -0.11649999767541885, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "R_Pinky2" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.012282085, -0.0065, -0.0065), (0.012282085, 0.0065, 0.0065)]
                    double height = 0.011564168147742748
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.006500000134110451
                    matrix4d xformOp:transform = ( (-0.8042085907119247, -0.08647399209447926, -0.588023138782745, 0), (0.08647399209447926, 0.9618076072074597, -0.25970826769459165, 0), (0.588023138782745, -0.25970826769459165, -0.7660161979193845, 0), (-0.007750000339001417, -0.000800000037997961, -0.00559999980032444, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "R_Pinky2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.012282085, -0.0065, -0.0065), (0.012282085, 0.0065, 0.0065)]
                    double height = 0.011564168147742748
                    rel material:binding = </smplx_humanoid/bodies/R_Pinky2/visuals/Looks/material_rgba>
                    double radius = 0.006500000134110451
                    matrix4d xformOp:transform = ( (-0.8042085907119247, -0.08647399209447926, -0.588023138782745, 0), (0.08647399209447926, 0.9618076072074597, -0.25970826769459165, 0), (0.588023138782745, -0.25970826769459165, -0.7660161979193845, 0), (-0.007750000339001417, -0.000800000037997961, -0.00559999980032444, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/R_Pinky2/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/R_Pinky2/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/R_Pinky2/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "R_Pinky3" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.7853000164031982, 0.01900000311434269, -0.12770000100135803, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "R_Pinky3" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.010124683, -0.0052, -0.0052), (0.010124683, 0.0052, 0.0052)]
                    double height = 0.009849365800619125
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.005200000014156103
                    matrix4d xformOp:transform = ( (-0.8223883730886503, 0.020305881021074335, -0.5685647041148556, 0), (-0.020305881021074335, 0.9976784864386654, 0.06500238377881473, 0), (0.5685647041148556, 0.06500238377881473, -0.8200668595273157, 0), (-0.006750000175088644, 0.00020000000949949026, -0.004600000102072954, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "R_Pinky3" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.010124683, -0.0052, -0.0052), (0.010124683, 0.0052, 0.0052)]
                    double height = 0.009849365800619125
                    rel material:binding = </smplx_humanoid/bodies/R_Pinky3/visuals/Looks/material_rgba>
                    double radius = 0.005200000014156103
                    matrix4d xformOp:transform = ( (-0.8223883730886503, 0.020305881021074335, -0.5685647041148556, 0), (-0.020305881021074335, 0.9976784864386654, 0.06500238377881473, 0), (0.5685647041148556, 0.06500238377881473, -0.8200668595273157, 0), (-0.006750000175088644, 0.00020000000949949026, -0.004600000102072954, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/R_Pinky3/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/R_Pinky3/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/R_Pinky3/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "R_Ring1" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.7676999568939209, 0.027000002562999725, -0.08810000121593475, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "R_Ring1" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.016553655, -0.008, -0.008), (0.016553655, 0.008, 0.008)]
                    double height = 0.01710730791091919
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.00800000037997961
                    matrix4d xformOp:transform = ( (-0.9820362170125723, 0.05260910107760841, -0.18120912028511516, 0), (-0.05260910107760841, 0.8459261585323059, 0.5306987707340305, 0), (0.18120912028511516, 0.5306987707340305, -0.8279623755448782, 0), (-0.0139999995008111, 0.000750000006519258, -0.0026499999221414328, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "R_Ring1" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.016553655, -0.008, -0.008), (0.016553655, 0.008, 0.008)]
                    double height = 0.01710730791091919
                    rel material:binding = </smplx_humanoid/bodies/R_Ring1/visuals/Looks/material_rgba>
                    double radius = 0.00800000037997961
                    matrix4d xformOp:transform = ( (-0.9820362170125723, 0.05260910107760841, -0.18120912028511516, 0), (-0.05260910107760841, 0.8459261585323059, 0.5306987707340305, 0), (0.18120912028511516, 0.5306987707340305, -0.8279623755448782, 0), (-0.0139999995008111, 0.000750000006519258, -0.0026499999221414328, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/R_Ring1/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/R_Ring1/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/R_Ring1/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "R_Ring2" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.795699954032898, 0.02850000187754631, -0.0934000015258789, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "R_Ring2" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.014593573, -0.0074, -0.0074), (0.014593573, 0.0074, 0.0074)]
                    double height = 0.01438714750111103
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.007400000002235174
                    matrix4d xformOp:transform = ( (-0.9522388911694333, -0.06255576475304148, -0.29887749921306117, 0), (0.06255576475304148, 0.9180666350885676, -0.3914593531629631, 0), (0.29887749921306117, -0.3914593531629631, -0.8703055262580008, 0), (-0.01145000010728836, -0.000750000006519258, -0.0035500000230968, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "R_Ring2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.014593573, -0.0074, -0.0074), (0.014593573, 0.0074, 0.0074)]
                    double height = 0.01438714750111103
                    rel material:binding = </smplx_humanoid/bodies/R_Ring2/visuals/Looks/material_rgba>
                    double radius = 0.007400000002235174
                    matrix4d xformOp:transform = ( (-0.9522388911694333, -0.06255576475304148, -0.29887749921306117, 0), (0.06255576475304148, 0.9180666350885676, -0.3914593531629631, 0), (0.29887749921306117, -0.3914593531629631, -0.8703055262580008, 0), (-0.01145000010728836, -0.000750000006519258, -0.0035500000230968, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/R_Ring2/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/R_Ring2/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/R_Ring2/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "R_Ring3" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.8184999823570251, 0.027000002562999725, -0.10050000250339508, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "R_Ring3" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.012441078, -0.006, -0.006), (0.012441078, 0.006, 0.006)]
                    double height = 0.012882157228887081
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.006000000052154064
                    matrix4d xformOp:transform = ( (-0.9703345130475971, 0.02328801998368335, -0.24064288163386394, 0), (-0.02328801998368335, 0.9817185470300767, 0.1889083540042762, 0), (0.24064288163386394, 0.1889083540042762, -0.9520530600776738, 0), (-0.010449999943375587, 0.00024999998277053237, -0.0025500000920146704, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "R_Ring3" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.012441078, -0.006, -0.006), (0.012441078, 0.006, 0.006)]
                    double height = 0.012882157228887081
                    rel material:binding = </smplx_humanoid/bodies/R_Ring3/visuals/Looks/material_rgba>
                    double radius = 0.006000000052154064
                    matrix4d xformOp:transform = ( (-0.9703345130475971, 0.02328801998368335, -0.24064288163386394, 0), (-0.02328801998368335, 0.9817185470300767, 0.1889083540042762, 0), (0.24064288163386394, 0.1889083540042762, -0.9520530600776738, 0), (-0.010449999943375587, 0.00024999998277053237, -0.0025500000920146704, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/R_Ring3/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/R_Ring3/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/R_Ring3/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "R_Thumb1" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.7109000086784363, 0.018300004303455353, -0.035099998116493225, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "R_Thumb1" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.02107469, -0.012, -0.012), (0.02107469, 0.012, 0.012)]
                    double height = 0.018149379640817642
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.012000000104308128
                    matrix4d xformOp:transform = ( (-0.5620027434522508, 0.033058977269834866, 0.8264745258859634, 0), (-0.033058977269834866, 0.9975047885172861, -0.0623802941733147, 0), (-0.8264745258859634, -0.0623802941733147, -0.5595075319695368, 0), (-0.008500000461935997, 0.0004999999655410647, 0.01249999925494194, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "R_Thumb1" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.02107469, -0.012, -0.012), (0.02107469, 0.012, 0.012)]
                    double height = 0.018149379640817642
                    rel material:binding = </smplx_humanoid/bodies/R_Thumb1/visuals/Looks/material_rgba>
                    double radius = 0.012000000104308128
                    matrix4d xformOp:transform = ( (-0.5620027434522508, 0.033058977269834866, 0.8264745258859634, 0), (-0.033058977269834866, 0.9975047885172861, -0.0623802941733147, 0), (-0.8264745258859634, -0.0623802941733147, -0.5595075319695368, 0), (-0.008500000461935997, 0.0004999999655410647, 0.01249999925494194, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/R_Thumb1/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/R_Thumb1/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/R_Thumb1/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "R_Thumb2" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.7279000282287598, 0.019300004467368126, -0.010099997743964195, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "R_Thumb2" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.017364318, -0.0095, -0.0095), (0.017364318, 0.0095, 0.0095)]
                    double height = 0.01572863571345806
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.009499999694526196
                    matrix4d xformOp:transform = ( (-0.7820132051503279, -0.19709273189948817, 0.5912782350544035, 0), (0.19709273189948817, 0.8217987008351599, 0.5346039330781736, 0), (-0.5912782350544035, 0.5346039330781736, -0.6038119059854878, 0), (-0.010250000283122063, -0.0025500000920146704, 0.007750000339001417, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "R_Thumb2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.017364318, -0.0095, -0.0095), (0.017364318, 0.0095, 0.0095)]
                    double height = 0.01572863571345806
                    rel material:binding = </smplx_humanoid/bodies/R_Thumb2/visuals/Looks/material_rgba>
                    double radius = 0.009499999694526196
                    matrix4d xformOp:transform = ( (-0.7820132051503279, -0.19709273189948817, 0.5912782350544035, 0), (0.19709273189948817, 0.8217987008351599, 0.5346039330781736, 0), (-0.5912782350544035, 0.5346039330781736, -0.6038119059854878, 0), (-0.010250000283122063, -0.0025500000920146704, 0.007750000339001417, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/R_Thumb2/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/R_Thumb2/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/R_Thumb2/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }

        def Xform "R_Thumb3" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.7484000325202942, 0.014100003987550735, 0.0054000020027160645, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "R_Thumb3" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.01669854, -0.009, -0.009), (0.01669854, 0.009, 0.009)]
                    double height = 0.015397077426314354
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.008999999612569809
                    matrix4d xformOp:transform = ( (-0.7209159852929048, -0.12340004491272794, 0.6819477384973425, 0), (0.12340004491272794, 0.9454373392168165, 0.30153054768987175, 0), (-0.6819477384973425, 0.30153054768987175, -0.6663533245097213, 0), (-0.00925000011920929, -0.0015499999281018972, 0.008750000037252903, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "R_Thumb3" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.01669854, -0.009, -0.009), (0.01669854, 0.009, 0.009)]
                    double height = 0.015397077426314354
                    rel material:binding = </smplx_humanoid/bodies/R_Thumb3/visuals/Looks/material_rgba>
                    double radius = 0.008999999612569809
                    matrix4d xformOp:transform = ( (-0.7209159852929048, -0.12340004491272794, 0.6819477384973425, 0), (0.12340004491272794, 0.9454373392168165, 0.30153054768987175, 0), (-0.6819477384973425, 0.30153054768987175, -0.6663533245097213, 0), (-0.00925000011920929, -0.0015499999281018972, 0.008750000037252903, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "Looks"
                {
                    def Material "material_rgba"
                    {
                        token outputs:mdl:displacement.connect = </smplx_humanoid/bodies/R_Thumb3/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:surface.connect = </smplx_humanoid/bodies/R_Thumb3/visuals/Looks/material_rgba/Shader.outputs:out>
                        token outputs:mdl:volume.connect = </smplx_humanoid/bodies/R_Thumb3/visuals/Looks/material_rgba/Shader.outputs:out>

                        def Shader "Shader"
                        {
                            uniform token info:id = "UsdPreviewSurface"
                            uniform token info:implementationSource = "sourceAsset"
                            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                            color3f inputs:diffuse_color_constant = (0.8, 0.6, 0.4)
                            token outputs:out
                        }
                    }
                }
            }
        }
    }

    def "joints"
    {
        def PhysicsJoint "L_Hip" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 80
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 800
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 80
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 800
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 80
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 800
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Hip_x"
            custom token mjcf:rotY:name = "L_Hip_y"
            custom token mjcf:rotZ:name = "L_Hip_z"
            rel physics:body0 = </smplx_humanoid/bodies/Pelvis>
            rel physics:body1 = </smplx_humanoid/bodies/L_Hip>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.0582, -0.09279999, -0.026)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 80
            float physxLimit:rotX:stiffness = 800
            float physxLimit:rotY:damping = 80
            float physxLimit:rotY:stiffness = 800
            float physxLimit:rotZ:damping = 80
            float physxLimit:rotZ:stiffness = 800
        }

        def PhysicsJoint "L_Knee" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 80
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 800
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 80
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 800
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 80
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 800
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Knee_x"
            custom token mjcf:rotY:name = "L_Knee_y"
            custom token mjcf:rotZ:name = "L_Knee_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Hip>
            rel physics:body1 = </smplx_humanoid/bodies/L_Knee>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.054699995, -0.37879997, -0.009400001)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 80
            float physxLimit:rotX:stiffness = 800
            float physxLimit:rotY:damping = 80
            float physxLimit:rotY:stiffness = 800
            float physxLimit:rotZ:damping = 80
            float physxLimit:rotZ:stiffness = 800
        }

        def PhysicsJoint "L_Ankle" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 80
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 800
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 80
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 800
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 80
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 800
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Ankle_x"
            custom token mjcf:rotY:name = "L_Ankle_y"
            custom token mjcf:rotZ:name = "L_Ankle_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Knee>
            rel physics:body1 = </smplx_humanoid/bodies/L_Ankle>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0435, -0.4031, -0.0319)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 80
            float physxLimit:rotX:stiffness = 800
            float physxLimit:rotY:damping = 80
            float physxLimit:rotY:stiffness = 800
            float physxLimit:rotZ:damping = 80
            float physxLimit:rotZ:stiffness = 800
        }

        def PhysicsJoint "L_Toe" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Toe_x"
            custom token mjcf:rotY:name = "L_Toe_y"
            custom token mjcf:rotZ:name = "L_Toe_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Ankle>
            rel physics:body1 = </smplx_humanoid/bodies/L_Toe>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.047300003, -0.05799997, 0.11819999)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "R_Hip" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 80
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 800
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 80
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 800
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 80
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 800
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Hip_x"
            custom token mjcf:rotY:name = "R_Hip_y"
            custom token mjcf:rotZ:name = "R_Hip_z"
            rel physics:body0 = </smplx_humanoid/bodies/Pelvis>
            rel physics:body1 = </smplx_humanoid/bodies/R_Hip>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0633, -0.103899986, -0.0213)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 80
            float physxLimit:rotX:stiffness = 800
            float physxLimit:rotY:damping = 80
            float physxLimit:rotY:stiffness = 800
            float physxLimit:rotZ:damping = 80
            float physxLimit:rotZ:stiffness = 800
        }

        def PhysicsJoint "R_Knee" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 80
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 800
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 80
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 800
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 80
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 800
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Knee_x"
            custom token mjcf:rotY:name = "R_Knee_y"
            custom token mjcf:rotZ:name = "R_Knee_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Hip>
            rel physics:body1 = </smplx_humanoid/bodies/R_Knee>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.044199996, -0.3624, -0.0168)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 80
            float physxLimit:rotX:stiffness = 800
            float physxLimit:rotY:damping = 80
            float physxLimit:rotY:stiffness = 800
            float physxLimit:rotZ:damping = 80
            float physxLimit:rotZ:stiffness = 800
        }

        def PhysicsJoint "R_Ankle" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 80
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 800
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 80
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 800
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 80
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 800
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Ankle_x"
            custom token mjcf:rotY:name = "R_Ankle_y"
            custom token mjcf:rotZ:name = "R_Ankle_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Knee>
            rel physics:body1 = </smplx_humanoid/bodies/R_Ankle>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.0154, -0.41070002, -0.0202)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 80
            float physxLimit:rotX:stiffness = 800
            float physxLimit:rotY:damping = 80
            float physxLimit:rotY:stiffness = 800
            float physxLimit:rotZ:damping = 80
            float physxLimit:rotZ:stiffness = 800
        }

        def PhysicsJoint "R_Toe" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Toe_x"
            custom token mjcf:rotY:name = "R_Toe_y"
            custom token mjcf:rotZ:name = "R_Toe_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Ankle>
            rel physics:body1 = </smplx_humanoid/bodies/R_Toe>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.038799994, -0.05830002, 0.119)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "Torso" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 100
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 1000
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 100
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 1000
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 100
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 1000
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "Torso_x"
            custom token mjcf:rotY:name = "Torso_y"
            custom token mjcf:rotZ:name = "Torso_z"
            rel physics:body0 = </smplx_humanoid/bodies/Pelvis>
            rel physics:body1 = </smplx_humanoid/bodies/Torso>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0028, 0.1099, -0.0276)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 100
            float physxLimit:rotX:stiffness = 1000
            float physxLimit:rotY:damping = 100
            float physxLimit:rotY:stiffness = 1000
            float physxLimit:rotZ:damping = 100
            float physxLimit:rotZ:stiffness = 1000
        }

        def PhysicsJoint "Spine" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 100
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 1000
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 100
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 1000
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 100
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 1000
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "Spine_x"
            custom token mjcf:rotY:name = "Spine_y"
            custom token mjcf:rotZ:name = "Spine_z"
            rel physics:body0 = </smplx_humanoid/bodies/Torso>
            rel physics:body1 = </smplx_humanoid/bodies/Spine>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.0094, 0.1319, -0.0058999993)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 100
            float physxLimit:rotX:stiffness = 1000
            float physxLimit:rotY:damping = 100
            float physxLimit:rotY:stiffness = 1000
            float physxLimit:rotZ:damping = 100
            float physxLimit:rotZ:stiffness = 1000
        }

        def PhysicsJoint "Chest" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 100
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 1000
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 100
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 1000
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 100
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 1000
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "Chest_x"
            custom token mjcf:rotY:name = "Chest_y"
            custom token mjcf:rotZ:name = "Chest_z"
            rel physics:body0 = </smplx_humanoid/bodies/Spine>
            rel physics:body1 = </smplx_humanoid/bodies/Chest>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0113, 0.0522, 0.0284)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 100
            float physxLimit:rotX:stiffness = 1000
            float physxLimit:rotY:damping = 100
            float physxLimit:rotY:stiffness = 1000
            float physxLimit:rotZ:damping = 100
            float physxLimit:rotZ:stiffness = 1000
        }

        def PhysicsJoint "Neck" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "Neck_x"
            custom token mjcf:rotY:name = "Neck_y"
            custom token mjcf:rotZ:name = "Neck_z"
            rel physics:body0 = </smplx_humanoid/bodies/Chest>
            rel physics:body1 = </smplx_humanoid/bodies/Neck>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0122, 0.1652, -0.0316)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "Head" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "Head_x"
            custom token mjcf:rotY:name = "Head_y"
            custom token mjcf:rotZ:name = "Head_z"
            rel physics:body0 = </smplx_humanoid/bodies/Neck>
            rel physics:body1 = </smplx_humanoid/bodies/Head>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.0248, 0.16049999, 0.0207)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "L_Thorax" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Thorax_x"
            custom token mjcf:rotY:name = "L_Thorax_y"
            custom token mjcf:rotZ:name = "L_Thorax_z"
            rel physics:body0 = </smplx_humanoid/bodies/Chest>
            rel physics:body1 = </smplx_humanoid/bodies/L_Thorax>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.0464, 0.0849, -0.0072)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "L_Shoulder" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Shoulder_x"
            custom token mjcf:rotY:name = "L_Shoulder_y"
            custom token mjcf:rotZ:name = "L_Shoulder_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Thorax>
            rel physics:body1 = </smplx_humanoid/bodies/L_Shoulder>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.119200006, 0.057700004, -0.015500001)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "L_Elbow" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Elbow_x"
            custom token mjcf:rotY:name = "L_Elbow_y"
            custom token mjcf:rotZ:name = "L_Elbow_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Shoulder>
            rel physics:body1 = </smplx_humanoid/bodies/L_Elbow>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.2541, -0.0722, -0.0425)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "L_Wrist" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 30
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 300
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 30
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 300
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 30
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 300
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Wrist_x"
            custom token mjcf:rotY:name = "L_Wrist_y"
            custom token mjcf:rotZ:name = "L_Wrist_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Elbow>
            rel physics:body1 = </smplx_humanoid/bodies/L_Wrist>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.25199997, 0.023199998, -0.0025000013)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 30
            float physxLimit:rotX:stiffness = 300
            float physxLimit:rotY:damping = 30
            float physxLimit:rotY:stiffness = 300
            float physxLimit:rotZ:damping = 30
            float physxLimit:rotZ:stiffness = 300
        }

        def PhysicsJoint "L_Index1" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Index1_x"
            custom token mjcf:rotY:name = "L_Index1_y"
            custom token mjcf:rotZ:name = "L_Index1_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Wrist>
            rel physics:body1 = </smplx_humanoid/bodies/L_Index1>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.10189998, -0.0087, 0.0194)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "L_Index2" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Index2_x"
            custom token mjcf:rotY:name = "L_Index2_y"
            custom token mjcf:rotZ:name = "L_Index2_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Index1>
            rel physics:body1 = </smplx_humanoid/bodies/L_Index2>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.03189999, 0.0022, 0.0029999986)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "L_Index3" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Index3_x"
            custom token mjcf:rotY:name = "L_Index3_y"
            custom token mjcf:rotZ:name = "L_Index3_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Index2>
            rel physics:body1 = </smplx_humanoid/bodies/L_Index3>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.022499979, -0.0023999996, 0.00010000169)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "L_Middle1" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Middle1_x"
            custom token mjcf:rotY:name = "L_Middle1_y"
            custom token mjcf:rotZ:name = "L_Middle1_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Wrist>
            rel physics:body1 = </smplx_humanoid/bodies/L_Middle1>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.109399974, -0.0063000005, -0.0040000007)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "L_Middle2" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Middle2_x"
            custom token mjcf:rotY:name = "L_Middle2_y"
            custom token mjcf:rotZ:name = "L_Middle2_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Middle1>
            rel physics:body1 = </smplx_humanoid/bodies/L_Middle2>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.030600011, 0.0008000005, -0.0040000007)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "L_Middle3" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Middle3_x"
            custom token mjcf:rotY:name = "L_Middle3_y"
            custom token mjcf:rotZ:name = "L_Middle3_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Middle2>
            rel physics:body1 = </smplx_humanoid/bodies/L_Middle3>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.023500025, -0.0020000003, -0.0041000023)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "L_Pinky1" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Pinky1_x"
            custom token mjcf:rotY:name = "L_Pinky1_y"
            custom token mjcf:rotZ:name = "L_Pinky1_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Wrist>
            rel physics:body1 = </smplx_humanoid/bodies/L_Pinky1>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.08399999, -0.0145, -0.043699995)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "L_Pinky2" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Pinky2_x"
            custom token mjcf:rotY:name = "L_Pinky2_y"
            custom token mjcf:rotZ:name = "L_Pinky2_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Pinky1>
            rel physics:body1 = </smplx_humanoid/bodies/L_Pinky2>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.015500009, -0.0011, -0.012000002)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "L_Pinky3" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Pinky3_x"
            custom token mjcf:rotY:name = "L_Pinky3_y"
            custom token mjcf:rotZ:name = "L_Pinky3_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Pinky2>
            rel physics:body1 = </smplx_humanoid/bodies/L_Pinky3>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.015500009, -0.0017000008, -0.011200003)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "L_Ring1" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Ring1_x"
            custom token mjcf:rotY:name = "L_Ring1_y"
            custom token mjcf:rotZ:name = "L_Ring1_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Wrist>
            rel physics:body1 = </smplx_humanoid/bodies/L_Ring1>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.09740001, -0.009300001, -0.0273)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "L_Ring2" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Ring2_x"
            custom token mjcf:rotY:name = "L_Ring2_y"
            custom token mjcf:rotZ:name = "L_Ring2_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Ring1>
            rel physics:body1 = </smplx_humanoid/bodies/L_Ring2>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.027999997, 0.0014999993, -0.0053000003)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "L_Ring3" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Ring3_x"
            custom token mjcf:rotY:name = "L_Ring3_y"
            custom token mjcf:rotZ:name = "L_Ring3_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Ring2>
            rel physics:body1 = </smplx_humanoid/bodies/L_Ring3>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.022800028, -0.0014999993, -0.007100001)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "L_Thumb1" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Thumb1_x"
            custom token mjcf:rotY:name = "L_Thumb1_y"
            custom token mjcf:rotZ:name = "L_Thumb1_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Wrist>
            rel physics:body1 = </smplx_humanoid/bodies/L_Thumb1>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.0406, -0.018, 0.025600001)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "L_Thumb2" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Thumb2_x"
            custom token mjcf:rotY:name = "L_Thumb2_y"
            custom token mjcf:rotZ:name = "L_Thumb2_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Thumb1>
            rel physics:body1 = </smplx_humanoid/bodies/L_Thumb2>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.01700002, 0.0010000002, 0.025)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "L_Thumb3" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Thumb3_x"
            custom token mjcf:rotY:name = "L_Thumb3_y"
            custom token mjcf:rotZ:name = "L_Thumb3_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Thumb2>
            rel physics:body1 = </smplx_humanoid/bodies/L_Thumb3>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.020500004, -0.0052000005, 0.0155)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Thorax" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Thorax_x"
            custom token mjcf:rotY:name = "R_Thorax_y"
            custom token mjcf:rotZ:name = "R_Thorax_z"
            rel physics:body0 = </smplx_humanoid/bodies/Chest>
            rel physics:body1 = </smplx_humanoid/bodies/R_Thorax>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0477, 0.0843, -0.0134)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "R_Shoulder" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Shoulder_x"
            custom token mjcf:rotY:name = "R_Shoulder_y"
            custom token mjcf:rotZ:name = "R_Shoulder_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Thorax>
            rel physics:body1 = </smplx_humanoid/bodies/R_Shoulder>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.10259999, 0.0535, -0.012699999)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "R_Elbow" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Elbow_x"
            custom token mjcf:rotY:name = "R_Elbow_y"
            custom token mjcf:rotZ:name = "R_Elbow_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Shoulder>
            rel physics:body1 = </smplx_humanoid/bodies/R_Elbow>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.2711, -0.0365, -0.026500002)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "R_Wrist" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 30
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 300
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 30
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 300
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 30
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 300
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Wrist_x"
            custom token mjcf:rotY:name = "R_Wrist_y"
            custom token mjcf:rotZ:name = "R_Wrist_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Elbow>
            rel physics:body1 = </smplx_humanoid/bodies/R_Wrist>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.24929997, -0.0045000017, -0.015299998)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 30
            float physxLimit:rotX:stiffness = 300
            float physxLimit:rotY:damping = 30
            float physxLimit:rotY:stiffness = 300
            float physxLimit:rotZ:damping = 30
            float physxLimit:rotZ:stiffness = 300
        }

        def PhysicsJoint "R_Index1" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Index1_x"
            custom token mjcf:rotY:name = "R_Index1_y"
            custom token mjcf:rotZ:name = "R_Index1_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Wrist>
            rel physics:body1 = </smplx_humanoid/bodies/R_Index1>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.09990001, -0.0118, 0.0196)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Index2" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Index2_x"
            custom token mjcf:rotY:name = "R_Index2_y"
            custom token mjcf:rotZ:name = "R_Index2_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Index1>
            rel physics:body1 = </smplx_humanoid/bodies/R_Index2>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.03189999, 0.0022, 0.0029999986)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Index3" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Index3_x"
            custom token mjcf:rotY:name = "R_Index3_y"
            custom token mjcf:rotZ:name = "R_Index3_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Index2>
            rel physics:body1 = </smplx_humanoid/bodies/R_Index3>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.022499979, -0.0022999998, 0.00010000169)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Middle1" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Middle1_x"
            custom token mjcf:rotY:name = "R_Middle1_y"
            custom token mjcf:rotZ:name = "R_Middle1_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Wrist>
            rel physics:body1 = </smplx_humanoid/bodies/R_Middle1>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.1074, -0.009399999, -0.003700003)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Middle2" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Middle2_x"
            custom token mjcf:rotY:name = "R_Middle2_y"
            custom token mjcf:rotZ:name = "R_Middle2_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Middle1>
            rel physics:body1 = </smplx_humanoid/bodies/R_Middle2>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.030600011, 0.0008000005, -0.0040000007)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Middle3" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Middle3_x"
            custom token mjcf:rotY:name = "R_Middle3_y"
            custom token mjcf:rotZ:name = "R_Middle3_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Middle2>
            rel physics:body1 = </smplx_humanoid/bodies/R_Middle3>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.023500025, -0.0020000003, -0.0041000023)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Pinky1" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Pinky1_x"
            custom token mjcf:rotY:name = "R_Pinky1_y"
            custom token mjcf:rotZ:name = "R_Pinky1_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Wrist>
            rel physics:body1 = </smplx_humanoid/bodies/R_Pinky1>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.08200002, -0.0176, -0.0435)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Pinky2" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Pinky2_x"
            custom token mjcf:rotY:name = "R_Pinky2_y"
            custom token mjcf:rotZ:name = "R_Pinky2_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Pinky1>
            rel physics:body1 = </smplx_humanoid/bodies/R_Pinky2>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.015500009, -0.0011, -0.012000002)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Pinky3" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Pinky3_x"
            custom token mjcf:rotY:name = "R_Pinky3_y"
            custom token mjcf:rotZ:name = "R_Pinky3_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Pinky2>
            rel physics:body1 = </smplx_humanoid/bodies/R_Pinky3>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.015500009, -0.0017000008, -0.011200003)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Ring1" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Ring1_x"
            custom token mjcf:rotY:name = "R_Ring1_y"
            custom token mjcf:rotZ:name = "R_Ring1_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Wrist>
            rel physics:body1 = </smplx_humanoid/bodies/R_Ring1>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.095399976, -0.012400001, -0.027100004)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Ring2" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Ring2_x"
            custom token mjcf:rotY:name = "R_Ring2_y"
            custom token mjcf:rotZ:name = "R_Ring2_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Ring1>
            rel physics:body1 = </smplx_humanoid/bodies/R_Ring2>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.027999997, 0.0014999993, -0.0053000003)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Ring3" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Ring3_x"
            custom token mjcf:rotY:name = "R_Ring3_y"
            custom token mjcf:rotZ:name = "R_Ring3_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Ring2>
            rel physics:body1 = </smplx_humanoid/bodies/R_Ring3>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.022800028, -0.0014999993, -0.007100001)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Thumb1" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Thumb1_x"
            custom token mjcf:rotY:name = "R_Thumb1_y"
            custom token mjcf:rotZ:name = "R_Thumb1_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Wrist>
            rel physics:body1 = </smplx_humanoid/bodies/R_Thumb1>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.038600028, -0.0211, 0.025899999)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Thumb2" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Thumb2_x"
            custom token mjcf:rotY:name = "R_Thumb2_y"
            custom token mjcf:rotZ:name = "R_Thumb2_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Thumb1>
            rel physics:body1 = </smplx_humanoid/bodies/R_Thumb2>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.01700002, 0.0010000002, 0.025)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Thumb3" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Thumb3_x"
            custom token mjcf:rotY:name = "R_Thumb3_y"
            custom token mjcf:rotZ:name = "R_Thumb3_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Thumb2>
            rel physics:body1 = </smplx_humanoid/bodies/R_Thumb3>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.020500004, -0.0052000005, 0.0155)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }
    }

    
}

